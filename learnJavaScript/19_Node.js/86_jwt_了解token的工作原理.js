/*
 * @Descripttion: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 * @version: April 2021 (version 1.56)
 * @Author: ZhangKe
 * @Date: 2022-04-26 11:12:35
 * @LastEditors: ZhangKe
 * @LastEditTime: 2022-04-26 12:15:00
 * @FilePath: \19_Node.js\86_jwt_了解token的工作原理.js
 */
// 了解 session 认证的局限性:
// session 认证机制需要配合 cookie 才能实现. 由于 cookie 默认不支持跨域访问, 所以, 当涉及到前端
// 跨域请求后端接口的时候, 需要做很多额外的配置, 才能实现跨域 session 认证.

// 注意:
// 1. 当前端请求后端接口不存在跨域问题的时候, 推荐使用 session 身份认证机制;
// 2. 当前端需要跨域请求后端接口的时候, 不推荐使用 session 身份认证机制, 推荐使用 JWT 认证机制;

// ----------------------------------------------------------------------

// 什么是 JWT?
// JWT (英文全称: JSON Web Token) 是目前最流行的跨域认证解决方案.

// ------------------------------------------------------------

// JWT 的工作原理:
// 1. 客户端登录: 提交账号与密码;
// 2. 验证账号和密码;
// 3. 验证通过后, 将用户的信息对象, 经过加密之后生成 Token 字符串;
// 4. 服务器响应: 将生成的 Token 发送给客户端;
// 5. 将 Token 存储到 LocalStorage 或 SessionStorage
// 6. 客户端再次发起请求, 通过请求头的 Authorization 字段, 将 Token 发送给服务器;
// 7. 服务器把 Token 字符串还原成用户的信息对象;
// 8. 用户的身份认证成功后, 服务器针对当前用户生成特定的响应内容;
// 9. 服务器响应: 把当前用户对应的页面内容响应给浏览器.

// 注意:
// 1. 用户的信息通过 Token 字符串的形式, 保存在客户端浏览器中. 服务器通过还原 Token 字符串的形式来认证用户的身份;
// 2. Session 身份认证机制是把用户的信息存储到服务器中;

// ------------------------------------------------------------

// JWT 的组成部分:
// JWT 通常由三部分组成, 分别是 Header(头部), Payload(有效荷载), Signature(签名).
// 三者之间使用英文的 . 分隔
// Header.Payload.Signature

// ------------------------------------------------------------

// JWT 的使用方式:
// 客户端收到服务器返回的 JWT 之后, 通常会将它储存在 localStorage 或 sessionStorage 中.

// 此后, 客户端每次与服务器通信之后, 都要带上这个 JWT 的字符串, 从而进行身份认证. 推荐的做法是把
// JWT 放在 HTTP 请求头的 Authorization 字段中.
// Authorization: Bearer <token>

// ----------------------------------------------------------

// JWT 的三个部分各自代表的含义:
// JWT 的三个组成部分, 从前到后分别是 Header(头部), Payload(有效荷载), Signature(签名).
// 其中,
// Payload 部分才是真正的用户信息, 它是用户信息经过加密之后生成的字符串.
// Header 和 Signature 是安全性相关的部分, 只是为了保证 Token 的安全性.