/*
 * @Descripttion: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 * @version: April 2021 (version 1.56)
 * @Author: ZhangKe
 * @Date: 2022-04-25 18:05:42
 * @LastEditors: ZhangKe
 * @LastEditTime: 2022-04-25 18:39:29
 * @FilePath: \19_Node.js\82_web开发模式.js
 */
// web 开发模式:
// 目前主流的 web 开发模式有两种, 分别是:
// 1. 基于服务器端渲染的传统 web 开发模式;
// 2. 基于前后端分离的新型 web 开发模式;

// --------------------------------------------------------

// 1. 服务端渲染的 web 开发模式
// 服务端渲染的概念: 服务器发送给客户端的 HTML 页面, 是在服务器通过字符串的拼接, 动态生成的. 因此,
// 客户端不需要使用 Ajax 这样的技术额外请求页面的数据.

// 优点:
// 1. 前端耗时少. 因为服务器端负责动态生成 HTML 内容, 浏览器只需要直接渲染页面即可. 尤其是移动端, 更省电.
// 2. 有利于 SEO. 因为服务器端响应的是完整的 HTML 页面内容, 所以爬虫更容易爬取获得信息, 更利于 SEO.

// 缺点:
// 1. 占用服务器端资源. 即服务器端完成 HTML 页面内容的拼接, 如果请求较多, 会对服务器造成一定的访问压力.
// 2. 不利于前后端分离, 开发效率低. 使用服务器端渲染, 则无法进行分工合作, 尤其对于前端复杂度高的项目, 不利于项目高效开发.

// --------------------------------------------------------

// 2. 前后端分离的 web 开发模式
// 前后端分离的概念: 前后端分离的开发模式, 依赖于 Ajax 技术的广泛应用. 简而言之, 前后端分离的 web 开发模式.
// 就是后端只负责提供 API 接口, 前端使用 Ajax 调用接口的开发模式.

// 优点:
// 1. 开发体验好;
// 2. 用户体验好;
// 3. 减轻了服务器端的渲染压力;

// 缺点:
// 1. 不利于 SEO. (解决方案: 利用 Vue, React 等前端框架的 SSR(server side render) 技术能够很好地解决 SEO 问题.);

// --------------------------------------------------------

// 如何使用 web 开发模式?

// 不谈业务场景而盲目选择使用何种开发模式都是耍流氓.
// 1. 比如企业级网站, 主要功能是展示而没有复杂的交互, 并且需要良好的 SEO, 则这时就需要使用服务器端渲染;
// 1. 而类似后端管理项目, 交互性比较强, 不需要考虑 SEO, 那么就可以使用前后端分离的开发模式.

// 另外, 具体使用何种开发模式并不是绝对的, 为了同时兼顾了首页的渲染速度和前后端分离的开发效率, 一些网站采用了首屏服务器端渲染 + 其他页面前后端分离的开发模式.
