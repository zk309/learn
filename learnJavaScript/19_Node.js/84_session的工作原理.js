/*
 * @Descripttion: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 * @version: April 2021 (version 1.56)
 * @Author: ZhangKe
 * @Date: 2022-04-25 20:00:15
 * @LastEditors: ZhangKe
 * @LastEditTime: 2022-04-26 01:07:59
 * @FilePath: \19_Node.js\84_session的工作原理.js
 */
// http 协议的无状态性:
// 了解 http 协议的无状态性是进一步学习 session 认证机制的必要前提.
// http 协议的无状态性, 指的是客户端的每次 http 请求都是独立的, 连续多个请求之间没有直接的关系, 服务器不会主动
// 保留每次 http 请求的状态.

// ----------------------------------------------------------

// 如何突破 http 无状态的限制:
// 对于超市来说, 为了方便收银员在进行结算时给 VIP 用户打折, 超市可以为每个 VIP 用户发放会员卡.
// 注意: 现实生活中的会员身份认证方式. 在 web 开发中的专业术语叫做 cookie.

// --------------------------------------------------------

// 什么是 cookie?
// cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串. 它由一个名称(Name), 一个值(value) 和其他几个用于控制 cookie 
// 有效期, 安全性, 使用范围的可选属性组成.

// 不同域名下的 cookie 各自独立, 每当客户端发起请求时, 会自动把当前域名下所有未过期的 cookie 一同发送到服务器.
// cookie 的几大特性:
// 1. 自动发送;
// 2. 域名独立;
// 3. 过期时限;
// 4. 4KB 限制;

// --------------------------------------------------------

// cookie 在身份证中的作用:
// 客户端第一次请求服务器的时候, 服务器通过响应头的形式, 向客户端发送一个身份认证的 cookie, 客户端会自动
// 将 cookie 保存在浏览器中.

// 随后, 当客户端浏览器每次请求服务器的时候, 浏览器会自动将身份认证相关的 cookie, 通过请求头的形式发送给
// 服务器, 服务器即可验证客户端的身份.

// -------------------------------------------------------------

// cookie 不具有安全性:
// 由于 cookie 是存储在浏览器中的, 而且浏览器也提供了可读写 cookie 的 API, 因此, cookie 很容易被伪造, 
// 不具有安全性. 因此不建议服务器将重要的隐私数据, 通过 cookie 的形式发送个浏览器.
// 注意: 千万不要使用 cookie 存储重要且隐私的数据, 比如用户的身份信息, 密码等.

// -----------------------------------------------------------

// 提高身份认证的安全性:
// 为了防止客户伪造会员卡, 收银员在拿到客户出示的会员卡之后, 可以在收银员机上进行刷卡认证. 只有收银机确认存在的
// 会员卡, 才能被正常使用.
// 这种 '会员卡' + '刷卡认证' 的设计理念, 就是 session 认证机制的精髓.

// -----------------------------------------------------------

// session 的工作原理:
// 1. 客户端登陆: 提交账号与密码
// 2. 服务器验证账号和密码;
// 3. 服务器将登陆成功后的用户信息存储在服务器的内存中, 同时生成对应的 cookie 字符串;
// 4. 服务器响应: 将生成的 cookie 响应给客户端;
// 5. 浏览器自动把 cookie 存储在当前域名下;
// 6. 客户端再次发起请求时, 通过请求头自动把当前域名下所有可用的 cookie 发送给服务器;
// 7. 服务器根据请求头中携带的 cookie, 从内存中查找对应的用户信息;
// 8. 用户的身份认证成功后, 服务器针对当前用户生成特定的相应内容;
// 9. 服务器响应: 把当前用户对应的页面内容响应给浏览器;